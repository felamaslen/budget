openapi: "3.0.0"
info:
  version: 4.0.0
  title: Budget
  license:
    name: MIT

servers:
  - url: http://localhost:3000/api/v4
    description: dev
  - url: https://budget.fela.space/api/v4
    description: prod

securitySchemas:
  BearerAuth:
    type: http
    scheme: bearer

security:
  - BearerAuth: []

paths:
  /user/login:
    post:
      summary: Get an API key for logging in
      security: []
      tags:
        - Authentication
      operationId: login
      description: |
        Log in to the app
      produces:
        - application/json
      consumes:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pin:
                  type: integer
                  example: 1234
                  description: The PIN of the user to retrieve an API key for
                  required: true
      responses:
        200:
          description: successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  apiKey:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZXN0IjoidG9rZW4ifQ.utPBtEhCTUy5DvSpRPSgA1cldi6v7Nj874DiRprsCQY
                  expires:
                    type: string
                    format: date-time
                  uid:
                    type: number
                    example: 1
                  name:
                    type: string
                    example: user1
        401:
          description: unsuccessful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  err:
                    type: string
                    example: Bad PIN

  /data/all:
    get:
      summary: Get all list + cashflow data
      tags:
        - Aggregation
      operationId: getAllData
      description: |
        Get all data required for app startup at once
      produces:
        - application/json
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: false
                  data:
                    type: object
                    properties:
                      overview:
                        $ref: "#/definitions/OverviewData"
                      funds:
                        $ref: "#/definitions/DataResponseFunds"
                      income:
                        $ref: "#/definitions/DataResponseIncome"
                      bills:
                        $ref: "#/definitions/DataResponseBills"
                      food:
                        $ref: "#/definitions/DataResponseFood"
                      general:
                        $ref: "#/definitions/DataResponseGeneral"
                      social:
                        $ref: "#/definitions/DataResponseSocial"
                      holiday:
                        $ref: "#/definitions/DataResponseHoliday"

  /multiple:
    patch:
      summary: Run multiple operations
      tags:
        - Aggregation
      operationId: multipleUpdateRequests
      description: |
        Run multiple update requests in parallel
      produces:
        - application/json
      consumes:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tasks:
                  type: array
                  items:
                    type: object
                    properties:
                      route:
                        type: string
                        description: sub-path of api/data to activate
                        example: 'food'
                      method:
                        type: string
                        description: method of request route
                        enum: ['post', 'put', 'delete']
                      query:
                        type: object
                        description: what would be in the URL query
                      body:
                        type: object
                        description: what would be in the request body
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/definitions/DataResponsePostList"

  /data/search/{dataType}/{column}/{searchTerm}/{numResults}:
    get:
      summary: Search suggestions
      tags:
        - Search
      operationId: search
      description: |
        Get search suggestions for data input
      produces:
        - application/json
      parameters:
        - in: path
          name: dataType
          description: The type of data to get
          required: true
          schema:
            type: string
            enum: [income, bills, food, general, holiday, social]
        - in: path
          name: column
          description: The column of data to search
          required: true
          schema:
            type: string
            enum: [item, category, shop]
        - in: path
          name: searchTerm
          description: The term to search for
          required: true
          schema:
            type: string
            example: "p"
        - in: path
          name: numResults
          description: The number of results to return
          required: false
          schema:
            type: number
            default: 5
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: false
                  data:
                    type: object
                    properties:
                      list:
                        type: array
                        items:
                          type: string
                        example: [Pizza, Peas, Pasta]

  /data/overview:
    get:
      summary: Get overview budget data
      tags:
        - Overview
      operationId: readOverview
      description: |
        Get monthly cash flow data, broken down into categories
      produces:
        - application/json
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/definitions/OverviewData"
  
  /data/funds:
    post:
      summary: Insert funds data
      tags:
        - Funds
      operationId: createFunds
      description: |
        Insert a new fund holding into the database
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                item:
                  type: string
                  example: "Scottish Mortgage IT Ordinary Shares 5p (share)"
                  required: true
                transactions:
                  type: array
                  items:
                    $ref: "#/definitions/FundTransaction"
      responses:
        201:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/definitions/DataResponsePostList"
    get:
      summary: Get funds data
      tags:
        - Funds
      operationId: readFunds
      description: |
        Get a list of fund holdings, optionally with price history
      produces:
        - application/json
      parameters:
        - in: query
          name: history
          description: whether or not to retrieve price history with holdings data
          required: false
          schema:
            type: boolean
        - in: query
          name: period
          description: period of time to retrieve price history over
          required: false
          schema:
            type: string
            enum: [year, month]
        - in: query
          name: length
          description: number of periods to retrive price history for
          required: false
          schema:
            type: integer
            example: 3
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/definitions/DataResponseFunds"
    put:
      summary: Update funds data
      tags:
        - Funds
      operationId: updateFunds
      description: |
        Update an existing fund holding in the database
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                  required: true
                item:
                  type: string
                  required: true
                  example: "City of London IT (share)"
                transactions:
                  type: array
                  items:
                    $ref: "#/definitions/FundTransaction"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/definitions/DataResponsePutList"
        400:
          description: invalid id
          content:
            application/json:
              schema:
                $ref: "#/definitions/ErrorResponse"
    delete:
      summary: Delete funds data
      tags:
        - Funds
      operationId: deleteFunds
      description: |
        Delete an existing fund holding in the database
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                  required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/definitions/DataResponsePutList"
        400:
          description: invalid id
          content:
            application/json:
              schema:
                $ref: "#/definitions/ErrorResponse"

  /data/stocks:
    get:
      summary: Get stocks data
      tags:
        - Funds
      operationId: readStocks
      description: |
        Get a weighted list of stocks holdings
      produces:
        - application/json
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      total:
                        type: integer
                        description: total weight
                      apiKey:
                        type: string
                        description: api key for stock quotes
                      stocks:
                        type: array
                        items:
                          type: array
                          example: ["NASDAQ:GOOGL", "Alphabet Inc Class A", 11239]
  
  /data/analysis/{period}/{groupBy}/{pageIndex}:
    get:
      summary: Get analysis data
      tags:
        - Analysis
      operationId: getDataAnalysis
      description: |
        Get weekly / monthly / yearly analysis data, broken down into paged categories
      produces:
        - application/json
      parameters:
        - in: path
          name: period
          description: Period (e.g. week) to analyse
          default: year
          schema:
            type: string
            enum: [year, month, week]
        - in: path
          name: groupBy
          description: Value to group items by
          default: category
          schema:
            type: string
            enum: [category, shop]
        - in: path
          name: pageIndex
          description: Page to retrieve, starting with 0
          default: 0
          schema:
            type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      cost:
                        type: array
                        items:
                          type: array
                          example: ["bills", [6500, 12300]]
  
  /data/analysis/deep/{category}/{period}/{groupBy}/{pageIndex}:
    get:
      summary: Get deep analysis data
      tags:
        - Analysis
      operationId: getDataAnalysisDeep
      description: |
        Get weekly / monthly / yearly analysis data, broken down by category into paged items
      produces:
        - application/json
      parameters:
        - in: path
          name: category
          description: category of data to retrieve
          required: true
          schema:
            type: string
            enum: [food, general, social, holiday]
        - in: path
          name: period
          description: Period (e.g. week) to analyse
          default: year
          schema:
            type: string
            enum: [year, month, week]
        - in: path
          name: groupBy
          description: Value to group items by
          default: category
          schema:
            type: string
            enum: [category, shop]
        - in: path
          name: pageIndex
          description: Page to retrieve, starting with 0
          default: 0
          schema:
            type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      items:
                        type: array
                        example: ["bills", [["Electricity", 6500], ["Water", 12300]]]

  /data/income:
    post:
      summary: Add income data
      tags:
        - Income
      operationId: createIncome
      description: |
        Post new income item
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                  description: Date of payment
                  format: date
                  example: "2020-02-10"
                  required: true
                item:
                  type: string
                  description: Source of income
                  example: "Salary"
                  required: true
                cost:
                  type: integer
                  description: Value of income
                  example: 325670
                  required: true
      responses:
        201:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/definitions/DataResponsePostList"
    put:
      summary: Modify income data
      tags:
        - Income
      operationId: updateIncome
      description: |
        Edit existing income item
      produces:
        - application/json
      consumes:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                  required: true
                date:
                  type: string
                  format: date
                  example: "2020-02-10"
                  required: false
                item:
                  type: string
                  example: "Salary"
                  required: false
                cost:
                  type: integer
                  description: Value of income
                  example: 325610
                  required: false
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/definitions/DataResponsePutList"
    delete:
      summary: Delete income data
      tags:
        - Income
      operationId: deleteIncome
      description: |
        Delete an existing income item in the database
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: id
          required: true
          type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/definitions/DataResponsePutList"
        400:
          description: invalid id
          content:
            application/json:
              schema:
                $ref: "#/definitions/ErrorResponse"

  /data/income/{page}:
    get:
      summary: Get income data
      tags:
        - Income
      operationId: readIncome
      description: |
        Get list of income
      produces:
        - application/json
      parameters:
        - in: path
          name: page
          description: Page of data to get (starts at 0)
          type: number
          default: 0
          required: false
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/definitions/DataResponseIncome"

  /data/bills:
    post:
      summary: Add bills data
      tags:
        - Bills
      operationId: createBills
      description: |
        Post new bills item
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                  description: Date of payment
                  format: date
                  example: "2020-02-10"
                  required: true
                item:
                  type: string
                  description: Bill
                  example: "Council tax"
                  required: true
                cost:
                  type: integer
                  description: Value of bill
                  example: 12801
                  required: true
      responses:
        201:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/definitions/DataResponsePostList"
    put:
      summary: Modify bills data
      tags:
        - Bills
      operationId: updateBills
      description: |
        Edit existing bills item
      produces:
        - application/json
      consumes:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                  required: true
                date:
                  type: string
                  format: date
                  example: "2020-02-10"
                  required: false
                item:
                  type: string
                  example: "Council tax"
                  required: false
                cost:
                  type: integer
                  description: Value of bills
                  example: 16400
                  required: false
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/definitions/DataResponsePutList"
    delete:
      summary: Delete bills data
      tags:
        - Bills
      operationId: deleteBills
      description: |
        Delete an existing bills item in the database
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: id
          required: true
          type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/definitions/DataResponsePutList"
        400:
          description: invalid id
          content:
            application/json:
              schema:
                $ref: "#/definitions/ErrorResponse"

  /data/bills/{page}:
    get:
      summary: Get bills data
      tags:
        - Bills
      operationId: readBills
      description: |
        Get list of bills
      produces:
        - application/json
      parameters:
        - in: path
          name: page
          description: Page of data to get (starts at 0)
          type: number
          default: 0
          required: false
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/definitions/DataResponseBills"

  /data/food:
    post:
      summary: Add food data
      tags:
        - Food
      operationId: createFood
      description: |
        Post new food item
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                  description: Date of payment
                  format: date
                  example: "2020-02-10"
                  required: true
                item:
                  type: string
                  example: "Lentils"
                  required: true
                category:
                  type: string
                  example: "Legumes"
                  required: true
                cost:
                  type: integer
                  description: Value of item
                  example: 300
                  required: true
                shop:
                  type: string
                  example: Tesco
                  required: true
      responses:
        201:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/definitions/DataResponsePostList"
    put:
      summary: Modify food data
      tags:
        - Food
      operationId: updateFood
      description: |
        Edit existing food item
      produces:
        - application/json
      consumes:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                  required: true
                date:
                  type: string
                  format: date
                  example: "2020-02-10"
                  required: false
                item:
                  type: string
                  example: "Lentils"
                  required: false
                category:
                  type: string
                  example: "Legumes"
                  required: false
                cost:
                  type: integer
                  description: Value of food
                  example: 305
                  required: false
                shop:
                  type: string
                  example: "Tesco"
                  required: false
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/definitions/DataResponsePutList"
    delete:
      summary: Delete food data
      tags:
        - Food
      operationId: deleteFood
      description: |
        Delete an existing food item in the database
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: id
          required: true
          type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/definitions/DataResponsePutList"
        400:
          description: invalid id
          content:
            application/json:
              schema:
                $ref: "#/definitions/ErrorResponse"

  /data/general:
    post:
      summary: Add general data
      tags:
        - General
      operationId: createGeneral
      description: |
        Post new general item
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                  description: Date of payment
                  format: date
                  example: "2020-02-10"
                  required: true
                item:
                  type: string
                  example: "Vacuum"
                  required: true
                category:
                  type: string
                  example: "Household"
                  required: true
                cost:
                  type: integer
                  description: Value of item
                  example: 13999
                  required: true
                shop:
                  type: string
                  example: Argos
                  required: true
      responses:
        201:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/definitions/DataResponsePostList"
    put:
      summary: Modify general data
      tags:
        - General
      operationId: updateGeneral
      description: |
        Edit existing general item
      produces:
        - application/json
      consumes:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                  required: true
                date:
                  type: string
                  format: date
                  example: "2020-02-10"
                  required: false
                item:
                  type: string
                  example: "Vacuum cleaner"
                  required: false
                category:
                  type: string
                  example: "Household"
                  required: false
                cost:
                  type: integer
                  description: Value of general item
                  example: 13999
                  required: false
                shop:
                  type: string
                  example: "Argos"
                  required: false
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/definitions/DataResponsePutList"
    delete:
      summary: Delete general data
      tags:
        - General
      operationId: deleteGeneral
      description: |
        Delete an existing general item in the database
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: id
          required: true
          type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/definitions/DataResponsePutList"
        400:
          description: invalid id
          content:
            application/json:
              schema:
                $ref: "#/definitions/ErrorResponse"
  
  /data/food/{page}:
    get:
      summary: Get food data
      tags:
        - Food
      operationId: readFood
      description: |
        Get list of food items
      produces:
        - application/json
      parameters:
        - in: path
          name: page
          description: Page of data to get (starts at 0)
          type: number
          default: 0
          required: false
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/definitions/DataResponseFood"


  /data/general/{page}:
    get:
      summary: Get general data
      tags:
        - General
      operationId: readGeneral
      description: |
        Get list of general items
      produces:
        - application/json
      parameters:
        - in: path
          name: page
          description: Page of data to get (starts at 0)
          type: number
          default: 0
          required: false
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/definitions/DataResponseGeneral"

  /data/social:
    post:
      summary: Add social data
      tags:
        - Social
      operationId: createSocial
      description: |
        Post new social item
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                  description: Date of payment
                  format: date
                  example: "2020-02-10"
                  required: true
                item:
                  type: string
                  example: "Bowling"
                  required: true
                society:
                  type: string
                  example: "Work parties"
                  required: true
                cost:
                  type: integer
                  description: Value of item
                  example: 1850
                  required: true
                shop:
                  type: string
                  example: "Bowling alley 101"
                  required: true
      responses:
        201:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/definitions/DataResponsePostList"
    put:
      summary: Modify social data
      tags:
        - Social
      operationId: updateSocial
      description: |
        Edit existing social item
      produces:
        - application/json
      consumes:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                  required: true
                date:
                  type: string
                  format: date
                  example: "2020-02-10"
                  required: false
                item:
                  type: string
                  example: "Bowling"
                  required: false
                society:
                  type: string
                  example: "Work parties"
                  required: false
                cost:
                  type: integer
                  description: Value of social item
                  example: 1499
                  required: false
                shop:
                  type: string
                  example: "Bowling alley 101"
                  required: false
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/definitions/DataResponsePutList"
    delete:
      summary: Delete social data
      tags:
        - Social
      operationId: deleteSocial
      description: |
        Delete an existing social item in the database
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: id
          required: true
          type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/definitions/DataResponsePutList"
        400:
          description: invalid id
          content:
            application/json:
              schema:
                $ref: "#/definitions/ErrorResponse"

  /data/social/{page}:
    get:
      summary: Get social data
      tags:
        - Social
      operationId: readSocial
      description: |
        Get list of social items
      produces:
        - application/json
      parameters:
        - in: path
          name: page
          description: Page of data to get (starts at 0)
          type: number
          default: 0
          required: false
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/definitions/DataResponseSocial"

  /data/holiday:
    post:
      summary: Add holiday data
      tags:
        - Holiday
      operationId: createHoliday
      description: |
        Post new holiday item
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                  description: Date of payment
                  format: date
                  example: "2020-02-10"
                  required: true
                item:
                  type: string
                  example: Tickets
                  required: true
                society:
                  type: string
                  example: "Greece 2020"
                  required: true
                cost:
                  type: integer
                  description: Value of item
                  example: 43560
                  required: true
                shop:
                  type: string
                  example: Easyjet
                  required: true
      responses:
        201:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/definitions/DataResponsePostList"
    put:
      summary: Modify holiday data
      tags:
        - Holiday
      operationId: updateHoliday
      description: |
        Edit existing holiday item
      produces:
        - application/json
      consumes:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                  required: true
                date:
                  type: string
                  format: date
                  example: "2020-02-10"
                  required: false
                item:
                  type: string
                  example: "Tickets"
                  required: false
                holiday:
                  type: string
                  example: "Greece 2020"
                  required: false
                cost:
                  type: integer
                  description: Value of holiday item
                  example: 42854
                  required: false
                shop:
                  type: string
                  example: "Easyjet"
                  required: false
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/definitions/DataResponsePutList"
    delete:
      summary: Delete holiday data
      tags:
        - Holiday
      operationId: deleteHoliday
      description: |
        Delete an existing holiday item in the database
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: id
          required: true
          type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/definitions/DataResponsePutList"
        400:
          description: invalid id
          content:
            application/json:
              schema:
                $ref: "#/definitions/ErrorResponse"

  /data/holiday/{page}:
    get:
      summary: Get holiday data
      tags:
        - Holiday
      operationId: readHoliday
      description: |
        Get list of holiday items
      produces:
        - application/json
      parameters:
        - in: path
          name: page
          description: Page of data to get (starts at 0)
          type: number
          default: 0
          required: false
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/definitions/DataResponseHoliday"

definitions:
  ErrorResponse:
    type: object
    properties:
      error:
        type: boolean
        example: true
      errorMessage:
        type: string
        example: An error occurred

  OverviewData:
    type: object
    properties:
      data:
        type: object
        properties:
          endYearMonth:
            type: array
            example: [2018,9]
          currentYear:
            type: integer
            example: 2017,
          startYearMonth:
            type: array
            example: [2015,8]
            cost:
            type: object
            properties:
          balance:
            type: array
            description: Balance for the displayed months
            example: [488932, 916589, 1055601]
          old:
            type: array
            description: Balance for the months preceding the displayed data
            example: [140000, 235686]
          income:
            type: array
            example: [180000, 200000]
          funds:
            type: array
            example: [180000, 200000]
          bills:
            type: array
            example: [72500, 5800]
          food:
            type: array
            example: [154, 506, 366, 472]
          general:
            type: array
            example: [15000, 110, 9086]
          social:
            type: array
            example: [2300]
          holiday:
            type: array
            example: [70000, 16000]
          futureMonths:
            type: integer
            example: 12
          currentMonth:
            type: integer
            example: 9

  DataResponseItem:
    type: object
    properties:
      I:
        type: string
        format: uuid
        description: ID
      d:
        type: string
        format: date
        description: Date
        example: "2020-02-10"
      i:
        type: string
        description: Item
        example: "Some item"
      c:
        type: integer
        description: Value
        example: 15492

  DataResponse:
    type: object
    properties:
      error:
        type: boolean
        example: false
      data:
        type: array
        items:
          $ref: "#/definitions/DataResponseItem"
      total:
        type: number
        description: Total cost of all list items since the beginning of time

  DataResponseIncome:
    allOf:
      - $ref: "#/definitions/DataResponse"
  DataResponseBills:
    allOf:
      - $ref: "#/definitions/DataResponse"
  DataResponseFood:
    allOf:
      - $ref: "#/definitions/DataResponse"
      - type: object
        properties:
          data:
            type: array
            items:
              allOf:
                - $ref: "#/definitions/DataResponseItem"
                - type: object
                  properties:
                    k:
                      type: string
                      description: Category
                      example: Fruit
                    s:
                      type: string
                      description: Shop
                      example: Tesco
  DataResponseGeneral:
    allOf:
      - $ref: "#/definitions/DataResponse"
      - type: object
        properties:
          data:
            type: array
            items:
              allOf:
                - $ref: "#/definitions/DataResponseItem"
                - type: object
                  properties:
                    k:
                      type: string
                      description: Category
                      example: Electronics
                    s:
                      type: string
                      description: Shop
                      example: Amazon
  DataResponseSocial:
    allOf:
      - $ref: "#/definitions/DataResponse"
      - type: object
        properties:
          data:
            type: array
            items:
              allOf:
                - $ref: "#/definitions/DataResponseItem"
                - type: object
                  properties:
                    y:
                      type: string
                      description: Society
                      example: Dinner
                    s:
                      type: string
                      description: Shop
                      example: The Fat Duck
  DataResponseHoliday:
    allOf:
      - $ref: "#/definitions/DataResponse"
      - type: object
        properties:
          data:
            type: array
            items:
              allOf:
                - $ref: "#/definitions/DataResponseItem"
                - type: object
                  properties:
                    h:
                      type: string
                      description: Holiday
                      example: Norway
                    s:
                      type: string
                      description: Shop
                      example: Easyjet.com

  DataResponsePostList:
    type: object
    properties:
      id:
        type: uuid
        description: newly-inserted ID
      total:
        type: integer
        example: 481829
        description: new total cost of list data
      error:
        type: boolean
        example: false
    example:
      total: 1003
      error: false

  DataResponsePutList:
    type: object
    properties:
      total:
        type: integer
        example: 1912391
        description: new total cost of list data
      error:
        type: boolean
        example: false

  FundTransaction:
    type: object
    properties:
      date:
        type: string
        format: date
        example: "2018-06-03"
      units:
        type: number
        example: 123.456
      cost:
        type: integer
        example: 607451

  DataResponseFunds:
    type: object
    properties:
      data:
        type: object
        properties:
          total:
            type: integer
            example: 1000000
            description: Total-to-date purchase cost of all holdings
          data:
            type: array
            items:
              type: object
              properties:
                I:
                  type: uuid
                  description: ID of holding
                i:
                  type: string
                  example: Gold ETF
                  description: Name of holding
                tr:
                  type: array
                  description: List of transactions for this holding
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        c:
                          type: integer
                          description: Cost of transaction
                          example: 200000
                        u:
                          type: float
                          description: Units purchased (or sold)
                          example: 1499.7
                        d:
                          type: string
                          format: date
                          description: Date of transaction
                          example: "2016-09-21"
                pr:
                  type: array
                  description: List of cached asset prices
                  items:
                    type: number
                  example: [103.4, 102.97, 103.94]
                prStartIndex:
                  description: Where in the list of price-cache times this holding first appears
                  type: integer
                  example: 1
                startTime:
                  type: integer
                  description: Timestamp of the first price cache time
                  example: 1475661661
                cacheTimes:
                  type: array
                  description: Timestamps of all of the price cache times, relative to startTime
                  items:
                    type: number
                  example: [0, 259200, 518400]
